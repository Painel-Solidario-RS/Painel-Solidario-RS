volumes:
  psql:

services:
  web:
    container_name: web
    build:
      dockerfile: .docker/Dockerfile.web
      context: .
    restart: unless-stopped
    ports:
      - 3000:3000
    depends_on:
      - traefik
    labels:
      traefik.enable: true
      traefik.http.services.web.loadbalancer.server.port: 3000
      traefik.http.routers.web.service: web
      traefik.http.routers.web.rule: PathPrefix(`/`)

  api:
    container_name: api
    build:
      dockerfile: .docker/Dockerfile.api
      context: .
    ports:
      - 4000:4000
    depends_on:
      - traefik
      - psql
    links:
      - psql
    labels:
      traefik.enable: true
      traefik.http.services.api.loadbalancer.server.port: 4000
      traefik.http.routers.api.service: api
      traefik.http.routers.api.rule: PathPrefix(`/api`)
      traefik.http.routers.api.middlewares: api-stripprefix
      traefik.http.middlewares.api-stripprefix.stripprefixregex.regex: \/api\/

    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      NODE_ENV: "${NODE_ENV}"
      JWT_SECRET: "${JWT_SECRET}"
      JWT_EXPIRATION: "${JWT_EXPIRATION}"
      CRYPTO_SECRET: "${CRYPTO_SECRET}"
      FIREBASE_ADMIN_CREDENTIALS_JWT: "${FIREBASE_ADMIN_CREDENTIALS_JWT}"

  psql:
    image: postgres:16.3
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - psql:/var/lib/postgresql/data # save data between restarts
      - ./psql_init:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432

  traefik:
    image: traefik:v2.8
    command:
      - --providers.docker=true
    ports:
      - 8080:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
